---
title: Discrete spatial models in BioSimulator.jl
options:
    fig_ext: .png
    eval: true
---

```{julia}
using BioSimulator
```

## Predator-prey dynamics

This example considers the Lotka-Volterra equations
$$
\begin{align*}
\frac{dx}{dt} &= \alpha x - \beta xy \\
\frac{dy}{dt} &= \delta x y - \gamma y
\end{align*}
$$
where $x$ tracks a population of rabbits and $y$ represents a population of foxes.
Here $\alpha$ and $\delta$ encode reproduction rates, whereas $\beta$ and $\gamma$ correspond to predation and death, respectively.
These two populations are subject to oscillations whenever all four interaction parameters are non-zero.

This tutorial demonstrates how to translate a general predator-prey model into a spatial model with volume exclusion effects.

### Model specification

There are three key steps:

1. Define a base model that encodes all the interaction rules.
2. Generate the full model by specifying lattice topology.
3. Define initial conditions.

#### Defining a base model

The `@def_reactions` macro transforms user input into an intermediate representation that encapsulates interactions in a model.
An *interaction* is structured as
```{julia; eval = false}
A + B --> C + D, k
```
which reads as "`A` interacts with `B` to produce `C` and `D` with rate `k`".
Note that the tokens `A`, `B`, `C`, and `D` are positional.
This means that the site occupied by `A` becomes occupied by `C` after the event; the same holds for `B` and `D`.
The rate `k` is independent of the number of neighboring sites and will be scaled further in the model specification pipeline.
The symbols `0` and `∅` are reserved to denote *empty sites* on a lattice.

The following encodes a simple predator-prey model with migration.
Note that rules are contained inside a `begin ... end` block.

```{julia}
base_model = @def_reactions begin
    Fox + 0 --> 0 + Fox, α1
    Rabbit + 0 --> 0 + Rabbit, α2
    Rabbit + 0 --> Rabbit + Rabbit, β
    Fox + Rabbit --> Fox + Fox, γ
    Rabbit --> 0, δ1
    Fox --> 0, δ2
end α1 α2 β γ δ1 δ2
```

At the end of the block you must specify an order for model parameters `α1, α2, ...` that will be used internally.
This means that you can pass parameter values in a vector `params` where `params[1]` corresponds to the symbol `α1` and so on.

#### Adding lattice topology

BioSimulator supports lattice simulations in 1D, 2D, and 3D with different topologies.

- `VonNeumann()`: Specifies that neighborhoods centered at a particular site are nearest-neighbors only.
- `Hexagonal()`: An option that works only for 2D simulations. This specifies that each site has 6 neighbors. It is used to provide a closer approximation to diffusion on a continuum.

The `@enumerate_with_sclass` macro is used to generate a minimal representation of a base model that accounts for different neighborhood configurations.
The macro takes in four arguments:

```{julia}
# assign parameter values
α1 = 1.0
α2 = 1.0
β = 2.0
γ = 1.5
δ1 = 1.0
δ2 = 0.5

# store in a vector in the order we specified before
params = [α1, α2, β, γ, δ1, δ2]

# generate a 2D model with VonNeumann neighborhoods
model = @enumerate_with_sclass base_model VonNeumann() 2 params
```

#### Setting up initial conditions

A *configuration* specifies the positions and types of every agent in a simulatin present at the beginning.
The following code generates a random configuration of points:

```{julia}
function generate_random_2Dpoints(xlim, ylim, saturation; boundary = false)
    area = (xlim[2] - xlim[1] + 1) * (ylim[2] - ylim[1] + 1)
    n = Int(ceil(area * saturation))

    list = Tuple{Int,Int}[]
    xrange = xlim[1]:xlim[2]
    yrange = ylim[1]:ylim[2]

    while length(list) < n
        point = (rand(xrange), rand(yrange))
        point ∉ list && push!(list, point)
    end

    if boundary
        for x in xrange
            push!(list, (x, ylim[1]-1))
            push!(list, (x, ylim[2]+1))
        end

        for y in yrange
            push!(list, (xlim[1]-1, y))
            push!(list, (xlim[2]+1, y))
        end
    end

    m = boundary ? 2*(xlim[2] - xlim[1] + 1) + 2*(ylim[2] - ylim[1] + 1) : 0

    points = zeros(Int, 2, n + m)
    for i in eachindex(list)
        points[1, i] = list[i][1]
        points[2, i] = list[i][2]
    end

    return points
end
```

For this example, we will generate a $100 \times 100$ cube filled to 20% capacity.
Each site is randomly assigned to be a fox or a rabbit.
We then pass in the initial data to construct a `Lattice` object used internally.
You can visualize the initial configuration by extracting it from a `Lattice` with the `Configuration` constructor and passing it to the `plot` command:

```{julia}
coord = generate_random_2Dpoints((1,100), (1,100), 0.2)
types = rand(["Fox", "Rabbit"], size(coord, 2))
state = Lattice(coord, types, nbhood = VonNeumann(), type_list = Dict(1 => "Fox", 2 => "Rabbit"))

using Plots
gr(format = :png, markersize = 2)

plot(Configuration(state))
```

### Simulation

The model specification process above effectively maps a lattice model onto a reaction-like representation.
This is achieved by accounting for combinatorics internally as a simulation progresses.
In theory, every exact simulation algorithm can be used to simulate a lattice model.
Currently only `Direct()` and `FirstReaction()` are supported.

The `simulate` command works the exact same way as before, and the output is still a `SamplePath`.
However, a `SamplePath` stores `Configuration` objects in this context.
We recommend using the `save_points` keyword to avoid storing too much data.

```{julia}
algorithm = Direct()
tfinal = 10.0

trajectory = @time simulate(state, model, algorithm, tfinal = tfinal, save_points = 0:0.125:tfinal)

@gif for configuration in trajectory
    plot(configuration, xlim = (-100, 200), ylim = (-100, 200), markersize = 1, legend = false)
end
```

### Adding boundaries

The previous simulation operates on an unbounded spatial domain.
This is obviously unrealistic for any physical model.
You can add limits by including a virtual "barrier" particle that prevents unlimited proliferation.

```{julia}
base_model = @def_reactions begin
    Fox + 0 --> 0 + Fox, α1
    Rabbit + 0 --> 0 + Rabbit, α2
    Rabbit + 0 --> Rabbit + Rabbit, β
    Fox + Rabbit --> Fox + Fox, γ
    Rabbit --> 0, δ1
    Fox --> 0, δ2
    X --> 0, not_used
end α1 α2 β γ δ1 δ2 not_used
```

The null reaction `X --> 0` is used to encode a type `X` into the simulation.
Setting its interaction rate to 0 will turn it into a barrier:

```{julia}
params = [α1, α2, β, γ, δ1, δ2, 0.0]

model = @enumerate_with_sclass base_model VonNeumann() 2 params
```

Now we must specify the structure of the barrier when building an initial configuration.

```{julia}
coord = generate_random_2Dpoints((1,100), (1,100), 0.2, boundary = true)
types = rand(["Fox", "Rabbit"], size(coord, 2) - 4*100)
types = [types; ["X" for _ in 1:400]]
state = Lattice(coord, types, nbhood = VonNeumann(), type_list = Dict(1 => "Fox", 2 => "Rabbit", 3 => "X"))

using Plots
gr(markersize = 2)

plot(Configuration(state))
```

Compare the behavior to the previous simulation:

```{julia}
algorithm = Direct()
tfinal = 100.0

trajectory = @time simulate(state, model, algorithm, tfinal = tfinal, save_points = 0:0.25:tfinal)

@gif for configuration in trajectory
    plot(configuration, xlim = (-1, 102), ylim = (-1, 102), markersize = 1.25)
end every 1
```

### Working with Configurations

A `Configuration` stores the position and type of each agent in a simulation.
We can use this information to extract additional information.
For example, the following code extracts population counts and plots it over time:

```{julia}
population = zeros(Int, length(trajectory), 2)

for (i, config) in enumerate(trajectory)
    # count foxes
    population[i, 1] = count(isequal(2), config.tcode)

    # count rabbits
    population[i, 2] = count(isequal(3), config.tcode)
end

plot(trajectory.t, population,
    xlabel = "time (arb. units)",
    ylabel = "count",
    label = ["fox" "rabbit"])
```
